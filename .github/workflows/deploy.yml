name: ae Backend Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy-to-ec2:
    runs-on: ubuntu-latest

    env:
      NODE_ENV: ${{ secrets.NODE_ENV || 'development' }}
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USERNAME: ${{ secrets.EC2_USERNAME }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10'
          run_install: false

      - name: Install dependencies
        run: pnpm install --ignore-scripts

      - name: Generate Prisma Client
        run: pnpm prisma generate
        env:
          NODE_ENV: ${{ env.NODE_ENV }}

      - name: Build Project
        run: pnpm build
        env:
          NODE_ENV: ${{ env.NODE_ENV }}

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          printf "%s\n" "${{ secrets.EC2_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          chmod 700 ~/.ssh

      - name: Upload .env to EC2
        run: |
          printf "%s" "${{ secrets.PROD_ENV_FILE }}" > .env
          scp -i ~/.ssh/id_rsa .env ${{ env.EC2_USERNAME }}@${{ env.EC2_HOST }}:~/backend/
          ssh -i ~/.ssh/id_rsa ${{ env.EC2_USERNAME }}@${{ env.EC2_HOST }} "chmod 600 ~/backend/.env"
          rm -f .env

      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/id_rsa ${{ env.EC2_USERNAME }}@${{ env.EC2_HOST }} "mkdir -p ~/backend"
          rsync -az --delete --chmod=Du=rwx,Dgo=rx,Fu=rw,Fgo=r \
            --exclude ".git" \
            --exclude "node_modules" \
            --exclude ".env" \
            -e "ssh -i ~/.ssh/id_rsa" \
           ./ ${{ env.EC2_USERNAME }}@${{ env.EC2_HOST }}:~/backend/

      - name: Install dependencies on EC2 & Generate Prisma, manage PM2
        run: |
          ssh -i ~/.ssh/id_rsa ${{ env.EC2_USERNAME }}@${{ env.EC2_HOST }} << 'EOF'
            set -euo pipefail
            cd ~/backend

            # Ensure pnpm is available
            if ! command -v pnpm >/dev/null 2>&1; then
              command -v corepack >/dev/null 2>&1 && corepack enable || true
              corepack prepare pnpm@latest --activate || true
            fi
            pnpm --version

            # Install production deps (allow scripts for postinstall like Prisma)
            pnpm install --prod

            # Generate Prisma Client even without devDependencies
            if ! command -v prisma >dev/null 2&1; then
              pnpm dlx prisma generate
            else
              pnpm prisma generate
            fi

            # Ensure PM2 is avaliable
            if command -v pm2 >/dev/null 2&1; then
              PM2 = "pm2"
            else
              PM2 = "pnpm dlx pm2"
            fi


      - name: Verify Deployment
        run: |
          ssh -i ~/.ssh/id_rsa ${{ env.EC2_USERNAME }}@${{ env.EC2_HOST }} << 'EOF'
            set -euo pipefail  
            curl -fsS http://127.0.0.1:4000/api/health | grep '"status":"ok"'
          EOF
